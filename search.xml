<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Just-for-Fun</title>
    <url>/posts/b06d8c08.html</url>
    <content><![CDATA[<p>Java vs COBOL</p>
<p><img src="https://raw.githubusercontent.com/kwongsui/git-image-source/master/images/121CF46A-237F-4B21-9B45-67B3F823D47C.jpeg" alt="Java vs COBOL" title="Java vs COBOL"></p>
<p>And other programming languages</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>COBOL</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式系统理论</title>
    <url>/posts/85a207bf.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ol>
<li>高性能，单机性能有上限</li>
<li>高可用，单机服务有单点故障</li>
<li>易伸缩，成本</li>
<li>开发效率和团队协同，服务化，模块化，重用</li>
</ol>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol>
<li>数据一致性</li>
<li>网络不可靠</li>
<li>通信延迟</li>
<li>服务依赖</li>
<li>异构系统</li>
</ol>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="错误观念"><a href="#错误观念" class="headerlink" title="错误观念"></a>错误观念</h2><ol>
<li>分布式系统不等于 SOA、微服务等服务化模式</li>
<li>分布式系统不等于 RPC、MQ、缓存、搜索等中间件（中间件背后是对什么进行了标准化，它的目的是什么，带来了哪些副作用）</li>
</ol>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol>
<li>狭义：分布式系统是一种其组件位于不同的联网计算机上的系统，然后通过互相传递消息来进行通信和协调。这些组件会相互作用，以达到共同的目标。</li>
<li>广义：涉及多个进程协作才能提供一个完整功能的系统。</li>
</ol>
<h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><h3 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h3><ol>
<li>分治步骤：分解 - 治理 - 归并</li>
<li>分治形式：分层，分块</li>
<li>问题越小越容易被解决，并且，只要解决了所有子问题，就解决父问题。</li>
<li>不同分支上的子问题，不能相互依赖，需要各自独立。 </li>
<li>低耦合，高内聚</li>
</ol>
<h4 id="耦合度"><a href="#耦合度" class="headerlink" title="耦合度"></a>耦合度</h4><p>指的是软件模块之间相互依赖的程度。比如，每次调用方法 A 之后都需要同步调用方法 B，那么此时方法 A 和 B 间的耦合度是高的。</p>
<h4 id="内聚度"><a href="#内聚度" class="headerlink" title="内聚度"></a>内聚度</h4><p>指的是模块内的元素具有的共同点的相似程度。比如，一个类中的多个方法有很多的共同之处，都是做支付相关的处理，那么这个类的内聚度是高的。</p>
<h3 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h3><ol>
<li>有意为之，目的是容许在一定范围内出现故障，而系统不受影响</li>
<li>提高资源利用率，双主多活、读写分离等</li>
<li>平衡成本</li>
</ol>
<h3 id="再连接"><a href="#再连接" class="headerlink" title="再连接"></a>再连接</h3><h4 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h4><p>完全消除了中心节点故障带来的全盘出错的风险，却带来了更高的节点间协作成本</p>
<h4 id="中心化"><a href="#中心化" class="headerlink" title="中心化"></a>中心化</h4><p>通过中心节点的集中式管理大大降低了协作成本，但是一旦中心节点故障则全盘出错。</p>
<h4 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h4><ol>
<li>更高性能的场景运用 TCP 协议优于 HTTP 协议</li>
<li>更高吞吐量的场景运用 UDP 协议优于 TCP 协议</li>
</ol>
<h4 id="序列化机制"><a href="#序列化机制" class="headerlink" title="序列化机制"></a>序列化机制</h4><h3 id="权衡"><a href="#权衡" class="headerlink" title="权衡"></a>权衡</h3><p>“分治”方案耦合度和内聚度是否最优，“冗余”带来的收益成本是否能够接受</p>
<ol>
<li>成本</li>
<li>时间</li>
<li>人员</li>
<li>性能</li>
<li>维护</li>
<li>框架、组件、协议</li>
</ol>
<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><h2 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h2><p>数据冗余产生数据一致性问题。</p>
<ul>
<li>强一致性</li>
<li>弱一致性</li>
<li>最终一致性</li>
</ul>
<h2 id="共识"><a href="#共识" class="headerlink" title="共识"></a>共识</h2><p>数据一致性是结果，“共识”是达到这种结果需要经过的过程，或者说一种手段。</p>
<ul>
<li>「水平」问题</li>
</ul>
<h3 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h3><h4 id="BFT-类"><a href="#BFT-类" class="headerlink" title="BFT 类"></a>BFT 类</h4><p>Byzantine Fault Tolerance 拜占庭容错</p>
<ul>
<li>基于确定性：PBFT 算法 Practical Byzantine Fault Tolerance</li>
<li>基于概率：PoW 算法 Proof of Work </li>
</ul>
<h4 id="CFT-类"><a href="#CFT-类" class="headerlink" title="CFT 类"></a>CFT 类</h4><p>Crash Fault Tolerance 崩溃容错</p>
<ul>
<li>Paxos 算法</li>
<li>Raft 算法</li>
<li>Zab 算法</li>
</ul>
<h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>分布式系统不能同时满足以下三个特性：</p>
<ol>
<li>C - Consistency 一致性：系统中多个副本之间的数据同一时间保持一致</li>
<li>A - Availability 可用性：系统总是在有限时间内返回结果</li>
<li>P - Partition tolerance 分区容错性：系统在遇到网络分区故障时，仍能够提供保证一致性和可用性的服务</li>
</ol>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><ol>
<li>P 未发生的时候，C 和 A 是可以满足的。</li>
<li>P 发生的时候，节点之间不能通信：</li>
</ol>
<ul>
<li>AP 若继续提供访问， A 没问题，节点不能通信，C 不满足</li>
<li>CP 若等待数据同步完成，即 C 满足，再提供访问，则 A 不满足</li>
</ul>
<h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><ol>
<li>正常运行情况下，不存在 CP 和 AP 的选择，可以同时满足 CA。</li>
<li>CAP 关注的粒度是数据，而不是整个系统。</li>
<li>CAP 是忽略网络延迟的。</li>
<li>AP 牺牲一致性 和 CP 牺牲可用性只是指分区期间</li>
</ol>
<h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>分布式系统即使无法做到强一致性，也能以合适的方式达到最终一致性。g</p>
<ol>
<li>BA - Basically Available 基本可用：系统出现故障时，允许损失部分可用性，保证核心可用。</li>
<li>S - Soft State 软状态：系统允许出现中间状态，该中间状态不影响整体可用性，即允许出现暂时的数据不一致。</li>
<li>E - Eventually Consistent 最终一致性：系统中所有的数据副本经过一定时间后，最终达到一致的状态。</li>
</ol>
<ul>
<li>BASE 理论本质上是对 CAP 的延伸和补充，更具体地说，是对 CAP 中 AP 方案的一个补充。</li>
<li>牺牲强一致性获得可用性，与 ACID 相反，ACID 要求强一致性。</li>
</ul>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式系统大纲</title>
    <url>/posts/af6c68f3.html</url>
    <content><![CDATA[<h1 id="道"><a href="#道" class="headerlink" title="道"></a>道</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><h3 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h3><h1 id="术"><a href="#术" class="headerlink" title="术"></a>术</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h3><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h3><h3 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h3><h2 id="服务依赖"><a href="#服务依赖" class="headerlink" title="服务依赖"></a>服务依赖</h2><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h3 id="消息队列-1"><a href="#消息队列-1" class="headerlink" title="消息队列"></a>消息队列</h3><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h3 id="熔断-限流-降级"><a href="#熔断-限流-降级" class="headerlink" title="熔断/限流/降级"></a>熔断/限流/降级</h3><h3 id="补偿机制"><a href="#补偿机制" class="headerlink" title="补偿机制"></a>补偿机制</h3><h2 id="易伸缩"><a href="#易伸缩" class="headerlink" title="易伸缩"></a>易伸缩</h2><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><h1 id="器"><a href="#器" class="headerlink" title="器"></a>器</h1><h2 id="协同"><a href="#协同" class="headerlink" title="协同"></a>协同</h2><h3 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h3><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><h4 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h4><h4 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h4><h4 id="gPRC"><a href="#gPRC" class="headerlink" title="gPRC"></a>gPRC</h4><h4 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h4><h3 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h3><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><h2 id="缓存-1"><a href="#缓存-1" class="headerlink" title="缓存"></a>缓存</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h3 id="MemCache"><a href="#MemCache" class="headerlink" title="MemCache"></a>MemCache</h3><h2 id="消息队列-2"><a href="#消息队列-2" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><h2 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h2><h3 id="分布式-ID"><a href="#分布式-ID" class="headerlink" title="分布式 ID"></a>分布式 ID</h3><h3 id="分布式会话"><a href="#分布式会话" class="headerlink" title="分布式会话"></a>分布式会话</h3><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h3 id="补偿机制-1"><a href="#补偿机制-1" class="headerlink" title="补偿机制"></a>补偿机制</h3><h4 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h4><h4 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h4><h2 id="分库分表-1"><a href="#分库分表-1" class="headerlink" title="分库分表"></a>分库分表</h2><h3 id="Sharding-Sphere"><a href="#Sharding-Sphere" class="headerlink" title="Sharding-Sphere"></a>Sharding-Sphere</h3><h3 id="MyCat"><a href="#MyCat" class="headerlink" title="MyCat"></a>MyCat</h3><h2 id="读写分离-1"><a href="#读写分离-1" class="headerlink" title="读写分离"></a>读写分离</h2><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
</search>
